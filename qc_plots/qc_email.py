from datetime import datetime, timezone
import os
import smtplib
from subprocess import run
import tomli

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email import encoders
from getpass import getpass

_default_body = "This email was sent from the python program qc_plots"
_default_email_cfg = """
[server]
use_external_program = true

[server.program]
program = "mail"
subject_flag = "-s"
from_addr_flag = "-r"
attachment_flag = "-a"
body_arg = "stdin"

[server.smtp]
smtp_address = "localhost"
smtp_port = 0
# smtp_address = "smtp.gmail.com"
# smtp_address = "smtp.outlook.com"
# smtp_port = 587

[email]
from = ""
to = "tccon-qaqc@gps.caltech.edu"
body = "Plots automatically generated by `tccon_qc_plots` on {date} from {basename}"
subject_from_site_id = false
subject = "[#275]"

[email.sites]
ae = 226  # Ascension Island
an = 224  # Anmyeondo
bi = 213  # Bialystok
br = 236  # Bremen
bu = 220  # Burgos
ci = 210  # Caltech/Pasadena
db = 214  # Darwin
df = 225  # Armstrong/Dryden/Edwards
et = 227  # East Trout Lake
eu = 222  # Eureka
gm = 234  # Garmisch
hf = 276  # Hefei
hw = 274  # Harwell
iz = 216  # Izana
js = 233  # Saga
ka = 217  # Karlsruhe
ll = 219  # Lauder pre-2018 125HR
lr = 221  # Lauder post-2018 125HR
ni = 240  # Nicosia
ny = 237  # Ny-Alesund
oc = 223  # Lamont
or = 212  # Orleans
pa = 211  # Park Falls
pr = 231  # Paris
ra = 260  # Reunion
rj = 228  # Rikubetsu
so = 218  # Sodankyla
sp = 237  # Alternate abbreviation for Ny-Alesund?
tj = 229  # Tsukuba 120HR
tk = 229  # Tsukuba 125HR
wg = 215  # Wollongong
xh = 271  # Xianghe
zs = 235  # Zugspitze
"""


def write_default_config(config_file):
    with open(config_file, 'w') as f:
        f.write(_default_email_cfg.lstrip())


def send_email(subject, body, send_from, send_to, attachment, smtp_args=None, authenticate=False):
    """
    Sends an email with an attachement

    Inputs:
        - subject: email subject
        - body: email text
        - send_from: email address with which the email will be sent
        - send_to: email address the email will be sent to
        - attachment: full path to a file that will be attached to the email
        - smtp_args: if not passed, then the server and port are guessed from the `send_from`
          address (Gmail if "gmail" in the address, Outlook otherwise). If `smtp_args` is
          given, then it must be the sequence of arguments to pass to `smtplib.SMTP` to
          establish the connection - usually server and port.
        - authenticate: Ignored if `smtp_args` is `None`. Otherwise, setting this to `False`
          indicates that authentication is not necessary. Setting this to `True` means that
          a password is required, and will be prompted for interactively. If this is a string,
          then it is assumed to be a password.
    """

    # settup the message
    message = MIMEMultipart()
    message['From'] = send_from
    message['To'] = send_to
    message['Subject'] = subject
    message.attach(MIMEText(body, 'plain'))

    if attachment is not None:
        with open(attachment, 'rb') as infile:
            payload = MIMEApplication(infile.read(), _subtype='pdf')
        encoders.encode_base64(payload)
        payload.add_header('Content-Disposition', 'attachment', filename=os.path.basename(attachment))
        message.attach(payload)

    # send the message with SMTP
    if smtp_args is not None:
        passwd = None
        if authenticate is True:
            passwd = getpass()
        if authenticate is not False:
            passwd = authenticate
            authenticate = True
    elif '@gmail' in send_from:
        smtp_args = ('smtp.gmail.com', 587)
        authenticate = True
        passwd = getpass()
    else:
        smtp_args = ('smtp.outlook.com', 587)
        authenticate = True
        passwd = getpass()
    with smtplib.SMTP(*smtp_args) as session:
        if authenticate:
            session.starttls()  # enable security
            session.login(send_from, passwd)  # login with mail_id and password
        session.sendmail(send_from, send_to, message.as_string())


def send_email_ext(subject, body, send_from, send_to, attachment, cfg):
    """Send an email using an external program.

    Inputs:
        - subject: email subject
        - body: email text
        - send_from: email address with which the email will be sent
        - send_to: email address the email will be sent to
        - attachment: full path to a file that will be attached to the email
        - cfg: a dictionary that specifies how to call the program. Usually
          this is the server/program section of the config .toml file.
    """
    aflag = cfg['attachment_flag']
    fflag = cfg['from_addr_flag']
    sflag = cfg['subject_flag']
    pgrm = cfg['program']

    args = [pgrm, sflag, subject, fflag, send_from, send_to]
    if attachment is not None:
        args.insert(-1, aflag)
        args.insert(-1, str(attachment))

    if cfg['body_arg'] == 'stdin':
        run(args, input=body.encode('utf8'), check=True)
        print('Email sent using command: {} < {}'.format(' '.join(args), body.encode('utf8')))
    else:
        raise NotImplementedError('body_arg == {} not implemented for sending an email by an external program'.format(
            cfg['body_arg']
        ))


def send_email_from_config(cfg_file, site_id, attachment, nc_file, plot_url=None):
    """Send an email using a config dictionary to determine how to send it.

    Inputs:
        - cfg_file: path to the .toml config file to read in
        - site_id: the two-letter site ID for the site whose data was plotted.
          Used to look up the corresponding GGGBugs subject line, if the config
          specifies to do so.
        - attachment: path to the .pdf file to attach.
    """
    with open(cfg_file) as f:
        cfg = tomli.load(f)

    # Get message parts that we'll need regardless of whether we're sending
    # using smtplib or an external program

    to_addr = cfg['email']['to']
    from_addr = cfg['email']['from']
    body = cfg['email'].get('body', _default_body)

    # We need to make sure that the plot_url makes it into the body of the email even if
    # there isn't a slot for it in the configured body.
    if plot_url is not None and '{plot_url}' not in body:
        body += ' The plots are available at {plot_url}'


    body = body.format(
        date=datetime.now(timezone.utc).astimezone().strftime('%Y-%m-%d %H:%M %Z'),
        basename=os.path.basename(nc_file),
        plot_url=plot_url
    )

    if cfg['email']['subject_from_site_id']:
        try:
            subject = '[#{}]'.format(cfg['email']['sites'][site_id])
        except KeyError:
            raise KeyError('Unable to find a subject line for site ID {} in the config file {}'.format(
                site_id, cfg_file
            ))
    else:
        subject = cfg['email']['subject']

    if cfg['server']['use_external_program']:
        send_email_ext(
            subject=subject,
            body=body,
            send_from=from_addr,
            send_to=to_addr,
            attachment=attachment,
            cfg=cfg['server']['program']
        )
    else:
        smtp_info = cfg['server']['smtp']
        smtp_args = [smtp_info['smtp_address'], smtp_info['port']]
        # Not tested!
        if 'password' in smtp_info:
            auth = smtp_info['password']
        else:
            auth = smtp_info.get('requires_auth', True)
        send_email(subject=subject, body=body, send_from=from_addr, send_to=to_addr, attachment=attachment,
                   smtp_args=smtp_args, authenticate=auth)
